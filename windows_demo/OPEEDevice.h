#pragma once
//std lib includes
#include "stdint.h"
//OPEEngine includes
#include "DataWatch.h"

//windows demo only includes
#include "ExampleDataTypes.h"

template <size_t DWMaxCnt>
class OPEEDevice
{
    public:

        /*user code: group data objects together here (optional):*/
        typedef struct led_t
        {
            DataWatch<bool, 64, 2, DWMaxCnt> state; //type: bool (led on == true), total callback storage: 64 bytes, max subscribers: 3
            DataWatch<uint8_t, 64, 2, DWMaxCnt> pwm_percentage; //type: uint8_t (0 = 0% duty cycle, 100 == 100% duty cycle), total callback storage: 64 bytes, max subscribers: 3
        }led_t;
        /*user code end*/

       /*user code: instantiate data containers here:*/
        //template args: <data type, combined call-back storage pool size (bytes), max possible callbacks registered>
        DataWatch<button_event_t, 128, 3, DWMaxCnt> usr_button; //type: custom (event generated by button), total callback storage: 48 bytes, max subscribers: 2
        led_t led; //wrapper for LED pwm & on/off state data object
       /*user code end*/



        OPEEDevice():
            /*user code intantiate data objects with initial values:*/
            usr_button(button_event_t::release), //initial value of released
            led({ false, 0 }) //led with initial state of off, and 0% PWM requested
            /*user code end*/
        {
            CbHelper<DWMaxCnt>::init();
        }

};

const constexpr uint16_t DATA_WATCH_CNT = 3;
using Device = OPEEDevice<DATA_WATCH_CNT>;