#pragma once
// std lib
#include "stdint.h"
// OPEEngine
#include "OPEEngine.h"
// demo specific
#include "ExampleDataTypes.h"

// clang-format off
class Device
{
    public:

        /*USER CODE: group data contains together as structs here (optional):*/

        typedef struct led_t
        {
                // template args: <data type, combined call-back storage pool size (bytes), max possible callbacks registered>
                opee::DataWatch<bool, 32, 2> state; // <type: bool (led on == true), total callback storage: 64b, max subs: 2>
                opee::DataWatch<uint8_t, 32, 2> pwm_percentage; // <type: uint8_t (0 = 0% duty cycle, 100 == 100% duty cycle), total callback storage: 64b, max subs: 3>
        } led_t;

        /*USER CODE: end*/


        /*USER CODE: instantiate data containers here:*/

        opee::DataWatch<button_event_t, 64, 3> usr_button; // type: custom (event generated by button), total callback storage: 48 bytes, max subscribers: 2
        led_t led;          // wrapper for LED pwm & on/off state data object

        /*USER CODE: end*/

        Device(): 

            /*USER CODE: instantiate data objects with initial values:*/

            usr_button(button_event_t::release), // initial value of released
            led({true, 0}) // led with initial state of off, and 0% PWM requested
            
            /*USER CODE: end*/
        {
            opee::CbHelper<OPEEconfigMAX_DATA_WATCH_CNT>::init();
        }
};

// clang-format on