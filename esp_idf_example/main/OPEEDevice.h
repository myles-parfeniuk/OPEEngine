#pragma once
// std lib includes
#include "stdint.h"
// OPEEngine includes
#include "DataWatch.h"

// windows demo only includes
#include "ExampleDataTypes.h"

// clang-format off
template <size_t DWMaxCnt>
class OPEEDevice
{
    public:

        /*USER CODE: group data contains together as structs here (optional):*/

        typedef struct led_t
        {
                // template args: <data type, combined call-back storage pool size (bytes), max possible callbacks registered>
                DataWatch<bool, 64, 2, DWMaxCnt> state; // <type: bool (led on == true), total callback storage: 64b, max subs: 2>
                DataWatch<uint8_t, 64, 2, DWMaxCnt> pwm_percentage; // <type: uint8_t (0 = 0% duty cycle, 100 == 100% duty cycle), total callback storage: 64b, max subs: 3>
        } led_t;

        /*USER CODE: end*/


        /*USER CODE: instantiate data containers here:*/

        DataWatch<button_event_t, 128, 3, DWMaxCnt> usr_button; // type: custom (event generated by button), total callback storage: 48 bytes, max subscribers: 2
        led_t led;          // wrapper for LED pwm & on/off state data object

        /*USER CODE: end*/

        OPEEDevice(): 

            /*USER CODE: instantiate data objects with initial values:*/

            usr_button(button_event_t::release), // initial value of released
            led({true, 0}) // led with initial state of off, and 0% PWM requested
            
            /*USER CODE: end*/
        {
            CbHelper<DWMaxCnt>::init();
        }
};

// clang-format on

using Device = OPEEDevice<OPEEconfigMAX_DATA_WATCH_CNT>;